buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: '1.4.0'
    }
}

plugins {
    id "org.sonarqube" version "1.2"
}

apply plugin: 'groovy'
apply plugin: 'osgi'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'distribution'

repositories {
    mavenCentral()
    // sonatype snapshots
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile 'org.mnode.ical4j:ical4j:2.0.0',
            'org.codehaus.groovy:groovy-all:2.3.6',
            'javax.mail:javax.mail-api:1.5.4'

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0',
            'com.sun.mail:javax.mail:1.5.4', 'org.slf4j:slf4j-log4j12:1.7.10'
}

jar {
    from(project.rootDir) {
        include "LICENSE.txt"
    }
    
    manifest {
        instruction 'Require-Capability', 'osgi.extender;filter:="(osgi.extender=osgi.serviceloader.registrar)"'
        instruction 'Provide-Capability', '''osgi.serviceloader;osgi.serviceloader="net.fortuna.ical4j.model.ParameterFactory",
            osgi.serviceloader="net.fortuna.ical4j.model.PropertyFactory",
            osgi.serviceloader="net.fortuna.ical4j.validate.CalendarValidatorFactory"
        '''
    }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

scmVersion {
    tag {
        prefix = 'ical4j-extensions'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = [
        'release/.*': 'simple'
    ]
}

group = 'org.mnode.ical4j'
version = scmVersion.version
description = '''
Support for additional non-standard iCalendar objects
'''

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")

    // sonatype credentials
    sonatypeUsername = project.hasProperty('sonatypeUsername') ? project.getProperty('sonatypeUsername') : ''
    sonatypePassword = project.hasProperty('sonatypePassword') ? project.getProperty('sonatypePassword') : ''
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url 'http://ical4j.sourceforge.net'

                scm {
                    url 'https://github.com/ical4j/ical4j-extensions'
                    connection 'scm:git@github.com:ical4j/ical4j-extensions.git'
                    developerConnection 'scm:git@github.com:ical4j/ical4j-extensions.git'
                }

                licenses {
                    license {
                        name 'iCal4j - License'
                        url 'https://raw.githubusercontent.com/ical4j/ical4j/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'fortuna'
                        name 'Ben Fortuna'
                    }
                }
            }
        }
    }

    distributions {
        main {
            contents {
                from { ['README.md', 'LICENSE', 'AUTHORS', 'CHANGELOG', 'build/docs', 'build/libs']}
            }
        }
    }

    distTar {
        compression = Compression.GZIP
    }
}
